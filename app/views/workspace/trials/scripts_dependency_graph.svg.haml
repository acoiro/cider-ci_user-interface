
:ruby
  require 'open3'

  layouter = if params['layouter'].blank?
               "dot"
             else
               case params['layouter']
               when 'hierarcic'
                 'dot'
               when 'force-directed'
                 'fdp'
               else
                 'dot'
               end
             end

  arcs = if params[:'terminate-when'].present?
           :'terminate-when'
         else
           :'start-when'
         end


  trial ||=  @trial || Trial.find(params[:id])
  cache_signature = CacheSignature.signature(trial)

- cache [cache_signature, params] do


  :ruby

    sanitize = lambda{|str|
      str.gsub(/[^0-9A-Za-z.\-]/, '_')}

    # svg = Nokogiri::XML(File.open "test.svg")
    # svg.css(".node").first["class"] = "node test"

    build_arcs = lambda{|scripts, type|
        scripts.with_indifferent_access.map { |key,map|
          map[type] && map[type].map { |k,v| v || k}.map{ |dependency|
            [sanitize.(dependency['script']),
            sanitize.(key),
            (dependency['states'] || ['passed']).map{|w| sanitize.(w)} ]
          }
        }.flatten(1).compact
    }


    arcs2graphviz = lambda{|arcs, color|
      arcs.map{|a|
        %@"#{a[0]}" -> "#{a[1]}"  [id="#{a[0]}_#{a[1]}", @ +
        %@ color="#{color}", label=" #{a[2].join('\\n')}"];@ }}


    add_node_classes = lambda{|svg|
      xml = Nokogiri::XML(svg)
      xml.css(".node").each do |node|
        id = node.attr('id')
        state = trial.scripts[id]['state'] rescue 'undefined'
        node['class'] = node.attr('class') + " " + state
      end
      svg = xml.to_s
    }

    graphviz_nodes = trial.scripts.with_indifferent_access
      .map{|k,v| v.merge(key: (v[:key] || k), name: (v[:name] || k)) }
      .map{|n| n.slice(:key,:name)}.map{ |n|
        id = sanitize.(n[:key])
        label = sanitize.(n[:name])
        %@ "#{id}" [id="#{id}", label="#{label}"];@ }

    case arcs
    when :'start-when'
      start_arcs = build_arcs.(trial.scripts,'start-when')
      graphviz_start_arcs= arcs2graphviz.(start_arcs,"green")
      graphviz_terminate_arcs = []
    when :'terminate-when'
      graphviz_start_arcs = []
      terminate_arcs = build_arcs.(trial.scripts,'terminate-when')
      graphviz_terminate_arcs= arcs2graphviz.(terminate_arcs,"red")
    end

    graphviz = %@
      digraph "Scripts Dependency Graph" {
        stylesheet="#{stylesheet_path('application')}"
        id = "scripts-dependency-graph"
        #{graphviz_nodes.join("\n    ")}
        #{graphviz_start_arcs.join("\n    ")}
        #{graphviz_terminate_arcs.join("\n    ")}
      }
    @

    graphviz_svg, log =Open3.capture2("#{layouter} -T svg", stdin_data: graphviz)

    svg = add_node_classes.(graphviz_svg)

  != svg
