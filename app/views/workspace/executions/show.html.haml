-#  Copyright (C) 2013, 2014, 2015 Dr. Thomas Schank  (DrTom@schank.ch, Thomas.Schank@algocon.ch)
-#  Licensed under the terms of the GNU Affero General Public License v3.
-#  See the LICENSE.txt file provided with this software.

- execution ||= @execution 
- state = execution.state
- ecs = execution.execution_cache_signature
- cs = [execution.id,execution.updated_at,ecs.repositories_signature,ecs.commits_signature,
    ecs.branches_signature, ecs.tasks_signature,ecs.execution_issues_count,
    params,@trials.collection_cache_tag]

- cache cs  do |cache_tag|

  - tasks ||= @tasks
  - reload_timeout= session_adjust_reload_timeout(%w(failed passed).include?(execution.state) ? 30 : 3)
  #reload-page{data: { cache_tag: cache_tag, reload_timeout: reload_timeout}}

    .row

      .col-md-6
        %ol.breadcrumb.pull-left
          = render '/breadcrumbs/execution', execution: execution
      .col-md-6
        %ol.breadcrumb.with-circle-separator.pull-right
          %li 
            = link_to tree_attachments_workspace_execution_path(execution) do
              Attachments
          %li#issues-link.reload{data: {cache_tag: ecs.execution_issues_count}}
            - if ecs.execution_issues_count <= 0
              %span.text-muted Issues
            - else 
              = link_to issues_workspace_execution_path(execution) do
                %span.text-danger #{ecs.execution_issues_count} Issues
          %li 
            = link_to specification_workspace_execution_path(execution) do
              Specification

          %li#result-link.reload{data: {cache_tag: execution.result_summary?.to_s}}
            - if execution.result 
              = link_to result_workspace_execution_path(execution) do
                Result
            - else 
              %span.text-muted Result


    #issues-alert.reload{data: {cache_tag: ecs.execution_issues_count}}
      - if ecs.execution_issues_count >= 1
        .alert.alert-danger
          %p 
            This execution has issues! 


    #execution.execution

      %ul.list-inline.actions.pull-right
        %li.for-admin
          = form_tag workspace_execution_path(execution), method: 'DELETE' do
            = hidden_field_tag :authenticity_token, form_authenticity_token
            = button_tag type: :submit, class: "btn btn-danger" do
              %i.icon-trash
              Delete
        %li.for-signed-in-user
          =link_to edit_workspace_execution_path(execution), class: "btn btn-warning" do
            %i.icon-edit
            Edit
        %li.for-signed-in-user
          = form_tag retry_failed_workspace_execution_path(execution,@filter_params), method: 'POST', remote: false do
            = hidden_field_tag :authenticity_token, form_authenticity_token
            = button_tag type: :submit, class: "btn btn-primary" do
              %i.icon-retry
              Retry failed


      %h1
        %span#header-label.reload.label{data: {cache_tag: execution.state}, class: label_class_for_state(state)}<>
          %i{class: icon_class_for_state(state)}<>
        %span &nbsp; Execution "#{execution.name}"
      
      .row
        .col-md-9
          = render 'summary_speed', execution: execution, cache_tag: cache_tag
        .col-md-3.text-right
          = render 'tags', tags: execution.tags.sort, id: "execution-tags"

      = render 'summary_stats', execution: execution, cache_tag: cache_tag
      
      #commits.commits.reload.replace-without-animation{data: {cache_tag: ecs.commits_signature}}
        %h2 #{ execution.commits.count > 1 ? "Commits" : "Commit"}
        %table.commits.table.table-striped
          %thead
          %tbody
            != render partial: "commit_tr", collection: execution.commits, as: :commit

      = render 'tasks', execution: execution, tasks: tasks

